generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    emailVerified     DateTime?           @map("email_verified")
    image             String?
    accounts          Account[]
    sessions          Session[]
    UserWalletShards  UserWalletShards[]
    UserWalletDetails UserWalletDetails[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model UserWalletShards {
    id            String   @id @default(cuid())
    userId        String   @map("user_id")
    isEncrypted   Boolean  @map("is_encrypted")
    shard         String   @db.Text
    walletAddress String   @map("wallet_address")
    created_at    DateTime @default(now())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_wallet_shards")
}

model UserWalletDetails {
    id               String   @id @default(cuid())
    userId           String   @map("user_id")
    signingPublicKey String   @map("signing_public_key")
    walletAddress    String?  @map("wallet_address")
    created_at       DateTime @default(now())
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_wallet_details")
}
